<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.github.cormoran-io.pepper</groupId>
		<artifactId>pepper-metadata</artifactId>
		<version>1.23-SNAPSHOT</version>
		<relativePath>metadata</relativePath>
	</parent>

	<artifactId>pepper-parent</artifactId>

	<packaging>pom</packaging>
	<inceptionYear>2014</inceptionYear>

	<!-- Format source code -->
	<!-- mvn net.revelc.code.formatter:formatter-maven-plugin:2.8.0:format -->

	<!-- Add missing licenses -->
	<!-- mvn com.mycila:license-maven-plugin:format -->

	<!-- Make a release -->
	<!-- Do not -DskipTests, else it will skip javadoc which is mandatory for sonatype -->
	<!-- mvn release:clean release:prepare release:perform -Darguments="-Dmaven.test.skip" -->
	<!-- mvn release:rollback -->

	<!-- In case of 'gpg: signing failed: Timeout' -->
	<!-- Configure GPG -->
	<!-- https://central.sonatype.org/pages/working-with-pgp-signatures.html -->
	<!-- brew install gpg -->
	<!-- gpg \-\-gen-key -->
	<!-- gpg \-\-list-keys -->
	<!-- gpg \-\-keyserver http://keyserver.ubuntu.com:11371 \-\-send-keys keyid -->
	<!-- Then, maven release process will use this key to sign the artifacts uploaded to sonatype -->

	<!-- Deployment -->
	<!-- mvn deploy -PSonatype -Dmaven.test.skip -->
	<!-- Release in https://oss.sonatype.org -->
	<!-- Jira ticket: https://issues.sonatype.org/browse/OSSRH-10350 -->
	<!-- Needs 2 hours to appear in http://search.maven.org/ -->

	<properties>
		<!-- https://github.com/google/guava/releases -->
		<guava.version>27.0.1-jre</guava.version>
		<!-- https://github.com/google/guava-beta-checker -->
		<betachecker.version>1.0</betachecker.version>
		<errorprone.version>2.3.3</errorprone.version>

		<awaitility.version>4.0.1</awaitility.version>
		<findbugs.version>3.0.5</findbugs.version>
		<equals.verifier.version>3.1.9</equals.verifier.version>
		<checker.quals.version>2.11.0</checker.quals.version>

		<!-- newer version than spring-boot-dependencies, for JDK11 -->
		<mockito.version>2.23.4</mockito.version>

		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-pmd-plugin -->
		<maven-pmd-plugin.version>3.12.0</maven-pmd-plugin.version>
		<!-- https://mvnrepository.com/artifact/net.sourceforge.pmd/pmd -->
		<pmd.version>6.18.0</pmd.version>

		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-checkstyle-plugin -->
		<maven-checkstyle-plugin.version>3.1.0</maven-checkstyle-plugin.version>
		<!-- https://mvnrepository.com/artifact/com.puppycrawl.tools/checkstyle -->
		<checkstyle.version>8.24</checkstyle.version>

		<jacoco.instruction.ratio>0.70</jacoco.instruction.ratio>
		<jacoco.branch.ratio>0.50</jacoco.branch.ratio>

		<!-- Used to define the Xmx of JVM popped by surefire -->
		<xmx>128M</xmx>
		<!-- http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html -->
		<!-- We choose to fork to prevent AP License to complain -->
		<forkCount>1C</forkCount>

		<!-- TODO Exclude a few Sonar rules -->
		<!-- https://docs.sonarqube.org/display/SONAR/Analysis+Parameters#AnalysisParameters-Exclusions/Inclusions -->
	</properties>

	<profiles>
		<profile>
			<!-- Checks for compilation and tests, but not code quality -->
			<id>skipStyle</id>
			<activation>
				<property>
					<name>skipStyle</name>
				</property>
			</activation>
			<properties>
				<!-- Skip static-analysis -->
				<jacoco.skip>true</jacoco.skip>
				<checkstyle.skip>true</checkstyle.skip>
				<pmd.skip>true</pmd.skip>
				<cpd.skip>true</cpd.skip>
				<maven.javadoc.skip>true</maven.javadoc.skip>

				<!-- Skip formatting by revelc -->
				<formatter.skip>true</formatter.skip>
			</properties>
		</profile>
		<profile>
			<!-- Checks for compilation and tests, but not code quality -->
			<!-- mvn verify -PstyleOnly -->
			<id>styleOnly</id>
			<activation>
				<property>
					<name>styleOnly</name>
				</property>
			</activation>
			<properties>
				<!-- Skip tests -->
				<maven.test.skip>true</maven.test.skip>
				<!-- Skip jacoco as no tests -->
				<jacoco.skip>true</jacoco.skip>
			</properties>
		</profile>
		<profile>
			<!-- Used with -DskipTests: skip tests and skip style checking -->
			<id>dirty</id>
			<activation>
				<property>
					<name>skipTests</name>
				</property>
			</activation>
			<properties>
				<!-- Skip tests -->
				<maven.test.skip>true</maven.test.skip>

				<!-- Skip code validations -->
				<jacoco.skip>true</jacoco.skip>
				<checkstyle.skip>true</checkstyle.skip>
				<pmd.skip>true</pmd.skip>
				<cpd.skip>true</cpd.skip>
				<maven.javadoc.skip>true</maven.javadoc.skip>
			</properties>
		</profile>

		<profile>
			<id>circleci</id>
			<activation>
				<property>
					<name>env.CIRCLECI</name>
					<value>true</value>
				</property>
			</activation>
			<properties>
				<!-- CircleCI machines seems to have a lot of cores, which would led to too many forks given available memory -->
				<forkCount>1</forkCount>
			</properties>
		</profile>
	</profiles>

	<modules>
		<!-- static resources like the Checkstyle sheet -->
		<module>static</module>

		<!-- The java-core code -->
		<module>java</module>

		<!-- Holds the java-agent enabling Instrumentation -->
		<module>agent</module>

		<!-- This project metadata, holding for instance deployment resources -->
		<module>metadata</module>

		<!-- Port Eclipse MAT in an autonomous module -->
		<!-- Not official module as it does not comply with quality standards yet -->
		<module>mat</module>

		<!-- Some JMH benchmarks, especially for Double parsing -->
		<module>jmh</module>

		<module>unittest</module>

		<module>serialization</module>
		<module>compression</module>

		<!-- a JConsole plugin to facilitate tracking of off-heap -->
		<!-- Excluded as it is an experimental project -->
		<!-- <module>buffermonitor</module> -->
	</modules>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>

			<dependency>
				<groupId>nl.jqno.equalsverifier</groupId>
				<artifactId>equalsverifier</artifactId>
				<version>${equals.verifier.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- annotations from the Checker Framework: nullness, interning, locking, ... -->
			<dependency>
				<groupId>org.checkerframework</groupId>
				<artifactId>checker-qual</artifactId>
				<version>${checker.quals.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- dependencies AFTER dependencyManagement -->
	<dependencies>
		<!-- Always added, to facilitate tests -->
		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>${awaitility.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>nl.jqno.equalsverifier</groupId>
			<artifactId>equalsverifier</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.checkerframework</groupId>
			<artifactId>checker-qual</artifactId>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Always added, to facilitate logging -->
		<!-- Do not add logback, as the library user may prefer another logging framework -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<!-- Logback is added in test so that tests can log properly -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<!-- errorprone supports >=6 -->
						<source>${compiler.targetVersion}</source>
						<target>${compiler.targetVersion}</target>

						<!-- Fork to prevent PermGenOOM on a large build -->
						<fork>true</fork>

						<!-- https://github.com/google/guava-beta-checker -->
						<!-- We may prefer using http://overstock.github.io/library-detectors/usage.html -->

						<!-- We keep using @Beta for now... -->
						<!-- <compilerId>javac-with-errorprone</compilerId> -->
						<annotationProcessorPaths>
							<path>
								<groupId>com.google.guava</groupId>
								<artifactId>guava-beta-checker</artifactId>
								<version>${betachecker.version}</version>
							</path>
						</annotationProcessorPaths>

						<!-- Remove these compilerArgs to keep all checks enabled -->
						<compilerArgs>
							<!-- We keep using @Beta for now... -->
							<!-- <arg>-XepDisableAllChecks</arg> -->
							<!-- <arg>-Xep:BetaApi:ERROR</arg> -->
						</compilerArgs>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.codehaus.plexus</groupId>
							<artifactId>plexus-compiler-javac-errorprone</artifactId>
							<version>2.8.5</version>
						</dependency>
						<!-- override plexus-compiler-javac-errorprone's dependency on Error Prone with the latest version -->
						<dependency>
							<groupId>com.google.errorprone</groupId>
							<artifactId>error_prone_core</artifactId>
							<version>${errorprone.version}</version>
						</dependency>
					</dependencies>
				</plugin>

				<!-- -Dtest=TestClassToFileMapped selects a single test class -->
				<!-- -Dmaven.surefire.debug enables debug on Surefire plugin on port 5005 -->
				<!-- mvn -Dtest=TestClassToFileMapped -Dmaven.surefire.debug test -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<!-- Add ${argLine} to maintain the argument from Jacoco -->
						<!-- https://groups.google.com/forum/#!topic/jacoco/LzmCezW8VKA -->

						<!-- -XX:+StartAttachListener is for http://comments.gmane.org/gmane.comp.java.openjdk.macosx-port.devel/6094 -->
						<!-- -XX:-HeapDumpOnOutOfMemoryError because TestGCInspector will force an OOM -->
						<!-- -Djava.util.logging.config.file so that tests fallback on logback -->
						<argLine><![CDATA[-ea -Xmx${xmx} -XX:+StartAttachListener -XX:-HeapDumpOnOutOfMemoryError -Djava.util.logging.config.file=logging.properties ${argLine}]]></argLine>

						<!-- Alternative safer configuration for 1JVM per test -->
						<!-- <forkCount>1</forkCount> -->
						<!-- <reuseForks>false</reuseForks> -->

						<!-- default is filesystem -->
						<runOrder>alphabetical</runOrder>
					</configuration>
				</plugin>

				<!-- http://maven.apache.org/surefire/maven-failsafe-plugin/examples/inclusion-exclusion.html -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<configuration>
						<forkCount>1C</forkCount>
						<runOrder>alphabetical</runOrder>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
						<overwrite>true</overwrite>
					</configuration>
				</plugin>

				<!-- Add XXX-sources.jar in the repository -->
				<plugin>
					<!-- mvn source:jar -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>verify</phase>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- -Djacoco.skip=true -->
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>0.8.5</version>
					<executions>
						<execution>
							<id>default-prepare-agent</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
						<execution>
							<id>default-check</id>
							<goals>
								<goal>check</goal>
							</goals>
							<configuration>
								<rules>
									<rule implementation="org.jacoco.maven.RuleConfiguration">
										<!-- BUNDLE, PACKAGE, CLASS, SOURCEFILE or METHOD -->
										<element>BUNDLE</element>
										<limits>
											<limit implementation="org.jacoco.report.check.Limit">
												<!-- INSTRUCTION, LINE, BRANCH, COMPLEXITY, METHOD, CLASS -->
												<counter>BRANCH</counter>
												<!-- TOTALCOUNT, COVEREDCOUNT, MISSEDCOUNT, COVEREDRATIO, MISSEDRATIO -->
												<value>COVEREDRATIO</value>
												<minimum>${jacoco.branch.ratio}</minimum>
											</limit>
										</limits>
									</rule>
									<rule implementation="org.jacoco.maven.RuleConfiguration">
										<!-- BUNDLE, PACKAGE, CLASS, SOURCEFILE or METHOD -->
										<element>BUNDLE</element>
										<limits>
											<limit implementation="org.jacoco.report.check.Limit">
												<!-- INSTRUCTION, LINE, BRANCH, COMPLEXITY, METHOD, CLASS -->
												<counter>INSTRUCTION</counter>
												<!-- TOTALCOUNT, COVEREDCOUNT, MISSEDCOUNT, COVEREDRATIO, MISSEDRATIO -->
												<value>COVEREDRATIO</value>
												<minimum>${jacoco.instruction.ratio}</minimum>
											</limit>
										</limits>
									</rule>
								</rules>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>findbugs-maven-plugin</artifactId>
					<version>${findbugs.version}</version>
				</plugin>

				<plugin>
					<!-- Usage: mvn com.mycila:license-maven-plugin:format -->
					<groupId>com.mycila</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>3.0</version>
					<configuration>
						<header>com/mycila/maven/plugin/license/templates/MIT.txt</header>
						<properties>
							<owner>Benoit Lacelle</owner>
							<year>2017</year>
							<email>benoit.lacelle@gmail.com</email>
						</properties>
						<excludes>
							<exclude>**/*.xml</exclude>
							<exclude>**/*.log</exclude>
							<exclude>**/*.hprof</exclude>
							<exclude>**/*.versionsBackup</exclude>
							<exclude>**/*.csv</exclude>
							<exclude>**/*.html</exclude>
							<exclude>**/README</exclude>
							<exclude>src/test/resources/**</exclude>
							<exclude>src/main/resources/**</exclude>
							<exclude>target/**</exclude>
							<exclude>war/**</exclude>
							<exclude>gwt-unitCache/**</exclude>
						</excludes>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<configuration>
						<!-- Prevent git to clone the whole repo which is quite slow -->
						<!-- https://issues.apache.org/jira/browse/MRELEASE-777 -->
						<localCheckout>true</localCheckout>
						<pushChanges>false</pushChanges>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<!-- –Djacoco.skip=true -->
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<!-- -Dfindbugs.skip=true -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>net.revelc.code.formatter</groupId>
				<artifactId>formatter-maven-plugin</artifactId>
				<version>2.10.0</version>
				<configuration>
					<configFile>style/eclipse_java_code_formatter.xml</configFile>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>com.github.cormoran-io.pepper</groupId>
						<artifactId>pepper-static</artifactId>
						<version>${project.version}</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>format_eclipse</id>
						<goals>
							<goal>format</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- http://code.revelc.net/impsort-maven-plugin/ -->
				<groupId>net.revelc.code</groupId>
				<artifactId>impsort-maven-plugin</artifactId>
				<version>1.3.0</version>
				<configuration>
					<!-- Eclipse default -->
					<groups>java.,javax.,org.,com.</groups>
					<staticGroups>java,*</staticGroups>
					<excludes>
						<exclude>**/thrift/*.java</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>sort-imports</id>
						<goals>
							<goal>sort</goal><!-- runs at process-sources phase by default -->
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- http://maven.apache.org/maven-release/maven-release-plugin/usage.html -->
				<!-- mvn clean install -Pfull -->
				<!-- mvn release:clean release:prepare -Darguments="-DskipTests" -->
				<!-- mvn release:perform -Darguments="-DskipTests" -->
				<!-- git reset \-\-hard SOMESHA1 -->
				<!-- git push force -->
				<!-- git tag -d 12345 -->
				<!-- git push origin :refs/tags/12345 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<configuration>
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<tagNameFormat>pepper-core@{project.version}</tagNameFormat>

					<!-- http://central.sonatype.org/pages/apache-maven.html -->
					<!-- Sonatype profile is defined in pepper-metadata -->
					<releaseProfiles>Sonatype</releaseProfiles>

					<!-- On each release, push the jars to Maven Central -->
					<goals>deploy</goals>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<!-- https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8212233 -->
					<source>8</source>
					<defaultAuthor>Benoit Lacelle</defaultAuthor>
					<failOnError>false</failOnError>
				</configuration>
			</plugin>

			<plugin>
				<!-- Skip a row by adding '//NOPMD' at the end -->
				<!-- http://pmd.sourceforge.net/pmd-4.3.0/suppressing.html -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>${maven-pmd-plugin.version}</version>
				<configuration>
					<!-- <includeTests>true</includeTests> -->
					<indentSize>4</indentSize>
					<printFailingErrors>true</printFailingErrors>

					<!-- Code duplication: Lower is better. Default is 100 -->
					<minimumTokens>60</minimumTokens>

					<!-- Prevent [WARNING] Unable to locate Source XRef to link to - DISABLED -->
					<linkXRef>false</linkXRef>

					<!-- xml is required to run 'mvn pmd:check' -->
					<format>xml</format>

					<rulesets>
						<ruleset>style/pepper.pmd.rulesets.xml</ruleset>
					</rulesets>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>com.github.cormoran-io.pepper</groupId>
						<artifactId>pepper-static</artifactId>
						<version>${project.version}</version>
						<scope>runtime</scope>
					</dependency>
					<!-- Enables rules for XML, including pom.xml -->
					<dependency>
						<groupId>net.sourceforge.pmd</groupId>
						<artifactId>pmd-xml</artifactId>
						<version>${pmd.version}</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<!-- default phase is verify, which is after tests. We prefer to run static analysis before tests not to wait -->
						<phase>compile</phase>
						<goals>
							<goal>check</goal>
							<goal>cpd-check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- https://maven.apache.org/plugins/maven-checkstyle-plugin/ -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${maven-checkstyle-plugin.version}</version>
				<dependencies>
					<dependency>
						<!-- This dependency holds the default configuration -->
						<groupId>com.github.cormoran-io.pepper</groupId>
						<artifactId>pepper-static</artifactId>
						<version>${project.version}</version>
						<scope>runtime</scope>
					</dependency>
					<dependency>
						<!-- more recent than brought by maven plugin -->
						<groupId>com.puppycrawl.tools</groupId>
						<artifactId>checkstyle</artifactId>
						<version>${checkstyle.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<excludes>**/generated/**</excludes>
				</configuration>
				<executions>
					<execution>
						<id>check</id>
						<!-- default phase is verify, which is after tests. We prefer to run static analysis before tests not to wait -->
						<phase>validate</phase>
						<configuration>
							<configLocation>style/pepper.checkstyle.xml</configLocation>
							<!--<configLocation>checkstyle/mitrust.checkstyle.xml</configLocation> -->
							<encoding>UTF-8</encoding>
							<consoleOutput>true</consoleOutput>
							<failsOnError>true</failsOnError>
							<!-- Prevent [WARNING] Unable to locate Source XRef to link to - DISABLED -->
							<!-- only with goal checkstyle-aggregate or checkstyle generating a report -->
							<!--<linkXRef>false</linkXRef> -->
						</configuration>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<scm>
		<!-- Only developerConnection was not set in parent po;m as its own parent was not a SNAPSHOT -->
		<developerConnection>${scm.developerConnection}</developerConnection>
		<tag>HEAD</tag>
	</scm>
</project>
