<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
	<!-- If you set the basedir property below, then all reported file names will be relative to the specified directory. See http://checkstyle.sourceforge.net/5.x/config.html#Checker 
		<property name="basedir" value="${basedir}"/> -->

	<!-- Checks that a package-info.java file exists for each package. -->
	<!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
	<!-- <module name="JavadocPackage" /> -->

	<!-- Checks whether files end with a new line. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
	<!-- <module name="NewlineAtEndOfFile" /> -->

	<!-- Checks that property files contain the same keys. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
	<module name="Translation">
		<!-- @blacelle: We check translation consistency only for properties files starting with i18n -->
		<property name="baseName" value="^i18n.*$" />
	</module>

	<!-- Checks for Size Violations. -->
	<!-- See http://checkstyle.sf.net/config_sizes.html -->
	<module name="FileLength" />

	<!-- Checks for Size Violations. -->
	<!-- See http://checkstyle.sf.net/config_sizes.html -->
	<module name="LineLength">
		<!-- @blacelle: The limit should be 150 but sometimes Checkstyle counts unexpectedly, or Eclipse does not format as expected -->
		<property name="tabWidth" value="4" />
		<property name="max" value="160" />
	</module>

	<!-- Checks for whitespace -->
	<!-- See http://checkstyle.sf.net/config_whitespace.html -->
	<!-- We expect tabs for indentation -->
	<!-- <module name="FileTabCharacter" /> -->

	<!-- Miscellaneous other checks. -->
	<!-- See http://checkstyle.sf.net/config_misc.html -->
	<!-- <module name="RegexpSingleline"> -->
	<!-- <property name="format" value="\s+$" /> -->
	<!-- <property name="minimum" value="0" /> -->
	<!-- <property name="maximum" value="0" /> -->
	<!-- <property name="message" value="Line has trailing spaces." /> -->
	<!-- </module> -->

	<!-- Needed out of the TreeWalker -->
	<module name="SuppressWarningsFilter" />

	<!-- Enable switching off and on checkstyle by adding comments like : -->
	<!-- // CHECKSTYLE:OFF -->
	<!-- // CHECKSTYLE:ON -->
	<module name="SuppressWithPlainTextCommentFilter" />

	<module name="TreeWalker">
		<!-- Enable @SuppressWarnings("checkstyle:magicnumber") -->
		<!-- http://checkstyle.sourceforge.net/config_annotation.html#SuppressWarnings -->
		<!-- <module name="SuppressWarnings" /> -->
		<module name="SuppressWarningsHolder" />

		<!-- Enable switching off and on checkstyle by adding comments like : -->
		<!-- // CHECKSTYLE:OFF -->
		<!-- // CHECKSTYLE:ON -->
		<!-- Specific to treewalker module -->
		<module name="SuppressionCommentFilter" />

		<!-- Default is 8 -->
		<property name="tabWidth" value="4" />

		<!-- Necessary for SuppressionCommentFilter -->
		<!--<module name="FileContentsHolder" /> -->

		<!-- Checks for Javadoc comments. -->
		<!-- See http://checkstyle.sf.net/config_javadoc.html -->
		<module name="JavadocMethod">
			<!--http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod -->
			<property name="allowMissingParamTags" value="true" />
			<property name="allowMissingReturnTag" value="true" />
		</module>
		<module name="JavadocType">
			<!--http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod -->
			<property name="scope" value="public" />
			<property name="authorFormat" value="\S" />
			<!-- We do not care much about generics type in types -->
			<property name="allowMissingParamTags" value="true" />
		</module>
		<!-- <module name="JavadocVariable" /> -->
		<!-- <module name="JavadocStyle" /> -->

		<!-- https://github.com/checkstyle/checkstyle/issues/5148 -->
		<module name="MissingJavadocType">
			<!-- https://checkstyle.sourceforge.io/config_javadoc.html#MissingJavadocType -->
		</module>

		<module name="MissingJavadocMethod">
			<!-- https://checkstyle.sourceforge.io/config_javadoc.html#MissingJavadocMethod -->
			<property name="minLineCount" value="100" />
		</module>

		<!-- Checks for Naming Conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="ConstantName" />
		<module name="LocalFinalVariableName" />
		<module name="LocalVariableName" />
		<module name="MemberName" />
		<!-- http://checkstyle.sourceforge.net/config_naming.html#MethodName -->
		<!-- Accept BDD naming: i_accept_lower_and_underscore -->
		<module name="MethodName">
			<property name="format" value="^([a-z][a-zA-Z0-9]*)|([a-z][a-z0-9_]*)$" />
		</module>
		<module name="PackageName" />
		<module name="ParameterName" />
		<module name="StaticVariableName" />
		<module name="TypeName" />


		<!-- Checks for Headers -->
		<!-- See http://checkstyle.sf.net/config_header.html -->
		<!-- <module name="Header"> -->
		<!-- The follow property value demonstrates the ability -->
		<!-- to have access to ANT properties. In this case it uses -->
		<!-- the ${basedir} property to allow Checkstyle to be run -->
		<!-- from any directory within a project. See property -->
		<!-- expansion, -->
		<!-- http://checkstyle.sf.net/config.html#properties -->
		<!-- <property -->
		<!-- name="headerFile" -->
		<!-- value="${basedir}/java.header"/> -->
		<!-- </module> -->

		<!-- Following interprets the header file as regular expressions. -->
		<!-- <module name="RegexpHeader"/> -->


		<!-- Checks for imports -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<module name="AvoidStarImport" />
		<!-- defaults to sun.* packages -->
		<!-- @blacelle: when we import it, we DO need it -->
		<!-- <module name="IllegalImport" /> -->


		<!-- @blacelle: removed with Checkstyle 6.2 -->
		<!-- http://stackoverflow.com/questions/27919444/java-checkstyle-redundant-throws -->
		<!-- module name="RedundantImport" / -->

		<!-- @blacelle: Some imports appears as unused, but they are referenced by Javadoc -->
		<!-- <module name="UnusedImports" /> -->

		<!-- @blacelle: Sync with PMD.ExcessiveMethodLength -->
		<module name="MethodLength">
			<!-- https://checkstyle.sourceforge.io/config_sizes.html#MethodLength -->
			<property name="tokens" value="METHOD_DEF" />
			<!-- Comments are included -->
			<property name="countEmpty" value="false" />
			<!-- https://github.com/pmd/pmd/issues/2123 -->
			<property name="max" value="100" />
		</module>

		<!-- @blacelle: Sync with PMD.ExcessiveParameterList -->
		<module name="ParameterNumber">
			<property name="max" value="10" />
			<property name="ignoreOverriddenMethods" value="true" />
		</module>

		<!-- Checks for whitespace -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="EmptyForIteratorPad" />
		<!-- @blacelle: https://github.com/checkstyle/checkstyle/issues/47 -->
		<!-- <module name="GenericWhitespace" /> -->
		<module name="MethodParamPad" />
		<!-- @blacelle: we have whitespace after '{' for new String() { "A", "B" } -->
		<!-- <module name="NoWhitespaceAfter" /> -->
		<!-- <module name="NoWhitespaceBefore" /> -->
		<module name="OperatorWrap" />
		<module name="ParenPad" />
		<module name="TypecastParenPad" />
		<!-- @blacelle: we have whitespace after '{' for new String() { "A", "B" } -->
		<!-- <module name="WhitespaceAfter" /> -->
		<!-- <module name="WhitespaceAround" /> -->


		<!-- Modifier Checks -->
		<!-- See http://checkstyle.sf.net/config_modifiers.html -->
		<module name="ModifierOrder" />
		<module name="RedundantModifier" />


		<!-- Checks for blocks. You know, those {}'s -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<!-- @blacelle: blocks are cool to quickly decompose a method -->
		<!-- <module name="AvoidNestedBlocks" /> -->

		<!-- @blacelle: If it is sometimes easier to write empty blocks in if rather than negating the condition, but it is also the occasion for adding a log -->
		<module name="EmptyBlock" />

		<module name="LeftCurly" />
		<module name="NeedBraces" />
		<module name="RightCurly" />


		<!-- Checks for common coding problems -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="AvoidInlineConditionals" />


		<module name="EmptyStatement" />
		<module name="EqualsHashCode" />

		<!-- @blacelle: OK for arguments to hide fields in ctor and setters -->
		<!-- <module name="HiddenField" /> -->
		<module name="IllegalInstantiation" />
		<module name="InnerAssignment" />
		<module name="MagicNumber" />
		<module name="MissingSwitchDefault" />
		<module name="SimplifyBooleanExpression" />
		<!-- @blacelle: it is often easier to read with a proper if/else -->
		<!-- <module name="SimplifyBooleanReturn" /> -->

		<!-- Checks for class design -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<!-- @blacelle: this request for final methods which limits extensibility -->
		<!-- <module name="DesignForExtension" /> -->
		<module name="FinalClass" />
		<module name="HideUtilityClassConstructor" />
		<!-- @blacelle: We admit Interfaces without method to hold constants, or to represent a Tag interface -->
		<!-- <module name="InterfaceIsType" /> -->
		<!-- @blacelle: Request fields to be private, which limits extensibility -->
		<!-- <module name="VisibilityModifier" /> -->

		<!-- Miscellaneous other checks. -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="ArrayTypeStyle" />
		<!-- @blacelle: Parameters should be final... but we should have something to automate it -->
		<!-- <module name="FinalParameters" /> -->

		<!-- @blacelle: Re-activate in a warning conf -->
		<!-- <module name="TodoComment"> -->
		<!-- <property name="format" value="(TODO)|(FIXME)" /> -->
		<!-- </module> -->
		<module name="UpperEll" />

		<!-- @blacelle: Warning on missing @Override -->
		<module name="MissingOverride" />
	</module>

</module>
